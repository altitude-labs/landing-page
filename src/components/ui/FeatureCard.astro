---
import { Image } from 'astro:assets';
export interface Media {
  type: 'image' | 'video';
  src: string;
  alt?: string;
}

export interface Props {
  icon: string;
  title: string;
  description?: string;
  media?: Media;
  isExpanded?: boolean;
}

const { icon, title, description, media, isExpanded = false } = Astro.props;
---

<div class="feature-card" data-expanded={isExpanded} data-media-src={media?.src} data-media-type={media?.type}>
    <div class="feature-card-container relative rounded-[10px] w-full overflow-hidden bg-gradient-dark border border-transparent">
        <!-- Header -->
        <div class="feature-card-header flex items-center gap-[15px] p-5 cursor-pointer">
            <div class="w-6 h-6 flex-shrink-0">
                <Image src={icon} alt="logo icon" class="w-full h-full object-contain" width="24" height="24" />
            </div>
            <h3 class="text-white font-medium text-lg tracking-[-0.36px] flex-1">
                {title}
            </h3>
        </div>

        <!-- Body - Hidden par défaut -->
        <div class="feature-card-body">
            <div class="px-5 pb-5">
                <div class="flex flex-col gap-5">
                    {description && (
                        <p class="text-white/50 font-medium text-sm leading-[1.6] tracking-[-0.28px]">
                            {description}
                        </p>
                    )}

                    <!-- Media for mobile ONLY -->
                    {media && (
                        <div class="lg:hidden relative rounded-[5px] overflow-hidden w-full aspect-[290/181]">
                            {media.type === 'image' && (
                                <img src={media.src} alt={media.alt ?? ''} class="w-full h-full object-cover" width="290" height="181" />
                            )}
                            {media.type === 'video' && (
                                <video src={media.src} autoplay loop muted playsinline class="w-full h-full object-contain"></video>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Animations ultra-optimisées avec transform uniquement - pas de max-height */
    .feature-card {
        overflow: hidden;
        contain: layout style paint;
    }

    .feature-card-container {
        transition: border-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        contain: layout style;
        transform: translateZ(0);
    }

    .feature-card-header:hover {
        cursor: pointer;
    }

    /* Container du body avec position relative pour contenir l'absolute */
    .feature-card-body {
        position: relative;
        overflow: hidden;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: auto;
        contain: layout style;
    }

    /* Contenu caché par défaut avec position absolute */
    .feature-card-body > div {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        opacity: 0;
        transform: translateY(-20px);
        transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1),
                    opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: transform, opacity;
    }

    /* État étendu - contenu visible */
    .feature-card[data-expanded="true"] .feature-card-body > div {
        position: static;
        opacity: 1;
        transform: translateY(0);
    }

    .feature-card[data-expanded="true"] .feature-card-container {
        border-color: rgba(79, 115, 255, 0.5);
    }

    /* Optimisations spécifiques mobile - transitions plus rapides */
    @media (max-width: 1024px) {
        .feature-card-body > div {
            transition: transform 0.35s cubic-bezier(0.4, 0, 0.2, 1),
                        opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Conteneur ultra-optimisé pour mobile */
        .feature-card-container {
            contain: layout style paint;
            content-visibility: auto;
        }

        .feature-card {
            contain: layout style paint;
            content-visibility: auto;
        }
    }

    /* Gestion optimale de will-change */
    .feature-card-body > div {
        will-change: auto;
    }

    .feature-card[data-expanded="true"] .feature-card-body > div {
        will-change: transform, opacity;
    }

    /* Respecter les préférences d'accessibilité */
    @media (prefers-reduced-motion: reduce) {
        .feature-card-container,
        .feature-card-body,
        .feature-card-body > div {
            transition: none !important;
        }

        .feature-card[data-expanded="true"] .feature-card-body > div {
            position: static;
            opacity: 1;
            transform: translateY(0);
        }

        .feature-card:not([data-expanded="true"]) .feature-card-body > div {
            position: absolute;
            opacity: 0;
            transform: translateY(-20px);
        }
    }
</style>

<script>
// Animation simple basée sur l'exemple fourni

document.addEventListener('DOMContentLoaded', () => {
    const featureCards = document.querySelectorAll('.feature-card');

    featureCards.forEach(card => {
        const header = card.querySelector('.feature-card-header');
        if (!header) return;

        header.addEventListener('click', () => {
            const isCurrentlyExpanded = card.getAttribute('data-expanded') === 'true';
            const expandedCardsCount = Array.from(featureCards).filter(otherCard => otherCard.getAttribute('data-expanded') === 'true').length;

            if (isCurrentlyExpanded && expandedCardsCount === 1) {
                return;
            }
            
            // Fermer toutes les autres cartes (comportement accordion)
            featureCards.forEach(otherCard => {
                if (otherCard !== card) {
                    otherCard.setAttribute('data-expanded', 'false');
                }
            });

            // Toggle la carte cliquée
            card.setAttribute('data-expanded', String(!isCurrentlyExpanded));
        });
    });

    if (!Array.from(featureCards).some(card => card.getAttribute('data-expanded') === 'true')) {
        featureCards[0]?.setAttribute('data-expanded', 'true');
    }
});
</script>
