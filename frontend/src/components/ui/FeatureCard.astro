---
import backgroundLettersDesktop from '../../assets/background-letters-desk.svg';

export interface Props {
  icon: string;
  title: string;
  description?: string;
  videoThumbnail?: string;
  isExpanded?: boolean;
}

const { icon, title, description, videoThumbnail, isExpanded = false } = Astro.props;
---

<div class="feature-card-wrapper" data-expanded={isExpanded}>
    <div class="feature-card-container relative bg-secondary-blue rounded-[10px] w-full">
        <!-- Overlay for collapsed state -->
        <div class="collapsed-overlay absolute inset-0 bg-gradient-dark rounded-[10px] transition-opacity duration-300 pointer-events-none"></div>

        <!-- Content -->
        <div class="relative">
            <!-- Header -->
            <div class="feature-card-header flex items-center gap-[15px] p-5 cursor-pointer">
                <div class="w-6 h-6 flex-shrink-0">
                    <img src={icon} alt="" class="w-full h-full object-contain" />
                </div>
                <h3 class="text-white font-medium text-lg tracking-[-0.36px] flex-1">
                    {title}
                </h3>
            </div>
            <!-- Body -->
            <div class="feature-card-body overflow-hidden" style="max-height: 0; transition: max-height 0.4s ease-in-out;">
                <div class="relative p-[30px] pt-5">
                    <!-- Background effects are now part of the main container, so they are always there -->
                    <div class="absolute inset-0 overflow-hidden rounded-b-[10px] pointer-events-none">
                        <div class="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-full">
                            <img src={backgroundLettersDesktop.src} alt="" class="w-full h-full object-cover" />
                        </div>
                        <div class="absolute left-1/2 bottom-0 transform -translate-x-1/2 translate-y-1/2 w-[834px] h-[286px] bg-primary-dark opacity-30 blur-[150px] rounded-full"></div>
                    </div>
                    <div class="relative z-10 flex flex-col gap-5">
                        {description && (
                            <p class="text-white/50 font-medium text-sm leading-[1.6] tracking-[-0.28px]">
                                {description}
                            </p>
                        )}
                        {videoThumbnail && (
                            <div class="relative bg-white rounded-[5px] overflow-hidden w-full h-[181px]">
                                <img src={videoThumbnail} alt="Video thumbnail" class="w-full h-full object-cover"/>
                                <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                                    <div class="w-[45px] h-[45px] bg-secondary-blue/80 backdrop-blur-[1.679px] rounded-full flex items-center justify-center cursor-pointer hover:bg-secondary-blue transition-colors">
                                        <svg class="w-[27px] h-[27px] text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M8 5v14l11-7z"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const featureCards = document.querySelectorAll('.feature-card-wrapper');

    const setCardState = (card: HTMLElement, isExpanded: boolean) => {
        const body = card.querySelector('.feature-card-body') as HTMLElement;
        const overlay = card.querySelector('.collapsed-overlay') as HTMLElement;

        if (isExpanded) {
            overlay.style.opacity = '0';
            body.style.maxHeight = body.scrollHeight + 'px';
        } else {
            overlay.style.opacity = '1';
            body.style.maxHeight = '0';
        }
        card.setAttribute('data-expanded', String(isExpanded));
    };

    featureCards.forEach(card => {
        const header = card.querySelector('.feature-card-header') as HTMLElement;
        const isInitiallyExpanded = card.getAttribute('data-expanded') === 'true';
        setCardState(card, isInitiallyExpanded);

        header.addEventListener('click', () => {
            const isCurrentlyExpanded = card.getAttribute('data-expanded') === 'true';

            // Close all other cards before opening a new one
            if (!isCurrentlyExpanded) {
                featureCards.forEach(otherCard => {
                    if (otherCard !== card) {
                        setCardState(otherCard as HTMLElement, false);
                    }
                });
            }

            // Toggle the clicked card
            setCardState(card as HTMLElement, !isCurrentlyExpanded);
        });
    });
});
</script>
