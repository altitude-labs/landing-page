---
import backgroundLettersDesktop from '../../assets/background-letters-desk.svg';

export interface Media {
  type: 'image' | 'video';
  src: string;
  alt?: string;
}

export interface Props {
  icon: string;
  title: string;
  description?: string;
  media?: Media;
  isExpanded?: boolean;
}

const { icon, title, description, media, isExpanded = false } = Astro.props;
---

<div class="feature-card-wrapper" data-expanded={isExpanded} data-media-src={media?.src} data-media-type={media?.type}>
    <div class="feature-card-container relative rounded-[10px] w-full border border-transparent overflow-hidden bg-gradient-dark">
        <!-- Pseudo-élément pour la bordure animée -->
        
        <!-- Arrière-plan pour l'état déplié - Optimisé GPU -->
        <div class="expanded-background absolute inset-0 pointer-events-none opacity-0">
            <!-- Dégradé du bleu vers bleu clair (en arrière-plan) -->
            <div class="absolute inset-0 bg-gradient-to-b from-[#2A45A3]/20 via-[#2A45A3] to-[#4F6BCC] transform-gpu"></div>
            <!-- Motif de lettres (par-dessus le dégradé) -->
            <div class="absolute inset-0 opacity-100 transform-gpu">
                <img src={backgroundLettersDesktop.src} alt="" class="w-full h-full object-cover" width="2151" height="1429" />
            </div>
            <!-- Effet ellipse optimisé - Remplacé par gradient -->
            <div class="absolute left-1/2 bottom-0 transform -translate-x-1/2 translate-y-1/2 w-[834px] h-[286px] opacity-30 rounded-full transform-gpu"
                 style="background: radial-gradient(ellipse 834px 286px at center, #1F2937 0%, transparent 70%);"></div>
        </div>

        <!-- Grid container pour animation fluide -->
        <div class="feature-card-grid grid grid-rows-[auto_0fr]">
            <!-- Header -->
            <div class="feature-card-header flex items-center gap-[15px] p-5 cursor-pointer relative z-10">
                <div class="w-6 h-6 flex-shrink-0">
                    <img src={icon} alt="" class="w-full h-full object-contain" width="24" height="24" />
                </div>
                <h3 class="text-white font-medium text-lg tracking-[-0.36px] flex-1">
                    {title}
                </h3>
            </div>
            
            <!-- Body - Grid item qui s'expand -->
            <div class="feature-card-body overflow-hidden">
                <div class="relative px-5 pb-5 pt-0">
                    <div class="relative z-10 flex flex-col gap-5">
                        {description && (
                            <p class="text-white/50 font-medium text-sm leading-[1.6] tracking-[-0.28px]">
                                {description}
                            </p>
                        )}
                        
                        <!-- Media for mobile ONLY -->
                        {media && (
                            <div class="lg:hidden relative rounded-[5px] overflow-hidden w-full aspect-[290/181]">
                                {media.type === 'image' && (
                                    <img src={media.src} alt={media.alt ?? ''} class="w-full h-full object-cover" width="290" height="181" />
                                )}
                                {media.type === 'video' && (
                                    <video src={media.src} autoplay loop muted playsinline class="w-full h-full object-cover"></video>
                                )}
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    /* Pseudo-élément pour bordure animée - Optimisé GPU */
    .feature-card-container::after {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: 10px;
        border: 1px solid rgba(79, 115, 255, 0.5);
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s ease-out;
        will-change: opacity;
        transform: translateZ(0); /* Force GPU layer */
    }
    
    .feature-card-container.active-feature::after {
        opacity: 1;
    }
    
    /* État expanded pour grid */
    .feature-card-wrapper[data-expanded="true"] .feature-card-grid {
        grid-template-rows: auto 1fr;
    }
    
    .feature-card-wrapper[data-expanded="true"] .expanded-background {
        opacity: 1;
    }

    .feature-card-grid {
        grid-template-rows: auto 0fr;            /* état fermé */
        transition: grid-template-rows .3s cubic-bezier(.4,0,.2,1);
    }
    .expanded-background {
        transition: opacity .3s cubic-bezier(.4,0,.2,1);
        will-change: opacity;
        contain: paint; /* limite la zone de repaint */
    }
    .feature-card-body > * { 
        overflow: hidden;
        min-height: 0; /* important avec grid */
    }
    @media (prefers-reduced-motion: reduce) {
        .feature-card-grid,
        .expanded-background,
        .feature-card-container::after { transition: none !important; }
    }
</style>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const featureCards = document.querySelectorAll('.feature-card-wrapper');

    const setCardState = (card, isExpanded) => {
        const container = card.querySelector('.feature-card-container');
        if (!container) return;
        
        // Simple toggle des classes - Les animations CSS font le reste
        if (isExpanded) {
            container.classList.add('active-feature');
        } else {
            container.classList.remove('active-feature');
        }
        
        card.setAttribute('data-expanded', String(isExpanded));
    };

    // Configuration initiale
    featureCards.forEach((card, index) => {
        const header = card.querySelector('.feature-card-header');
        if (!header) return;
        
        const isInitiallyExpanded = card.getAttribute('data-expanded') === 'true';
        
        // État initial selon le breakpoint
        if (window.innerWidth >= 1024) {
            // Desktop: respecter l'état initial
            setCardState(card, isInitiallyExpanded);
        } else {
            // Mobile: toutes fermées initialement
            setCardState(card, false);
        }

        // Gestion des clics
        header.addEventListener('click', () => {
            const isCurrentlyExpanded = card.getAttribute('data-expanded') === 'true';
            
            if (window.innerWidth >= 1024) {
                // Desktop: une seule carte ouverte à la fois
                if (!isCurrentlyExpanded) {
                    featureCards.forEach(otherCard => {
                        setCardState(otherCard, otherCard === card);
                    });
                }
            } else {
                // Mobile: accordion classique
                if (!isCurrentlyExpanded) {
                    // Fermer les autres cartes
                    featureCards.forEach(otherCard => {
                        if (otherCard !== card) {
                            setCardState(otherCard, false);
                        }
                    });
                }
                setCardState(card, !isCurrentlyExpanded);
            }
        });
    });

    // Gestion du resize pour ajuster les états
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            const isDesktop = window.innerWidth >= 1024;
            
            featureCards.forEach((card, index) => {
                const isCurrentlyExpanded = card.getAttribute('data-expanded') === 'true';
                
                if (isDesktop) {
                    // Desktop: garder une carte ouverte
                    const shouldBeExpanded = index === 0 && !Array.from(featureCards).some(c => c.getAttribute('data-expanded') === 'true');
                    setCardState(card, shouldBeExpanded || isCurrentlyExpanded);
                } else {
                    // Mobile: fermer toutes les cartes
                    setCardState(card, false);
                }
            });
        }, 100);
    });
});
</script>
