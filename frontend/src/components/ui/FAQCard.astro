---
import backgroundLettersDesktop from '../../assets/background-letters-desk.svg';

export interface Props {
  question: string;
  answer: string;
  isExpanded?: boolean;
}

const { question, answer, isExpanded = false } = Astro.props;
---

<div class="faq-card-wrapper" data-expanded={isExpanded}>
    <div class="faq-card-container relative rounded-[10px] w-full border border-transparent overflow-hidden bg-gradient-dark">
        <!-- Expanded background -->
        <div class="expanded-background absolute inset-0 pointer-events-none opacity-0">
            <div class="absolute inset-0 bg-secondary-blue"></div>
            <div class="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[777px] h-[517px] opacity-10">
                <img src={backgroundLettersDesktop.src} alt="" class="w-full h-full object-cover" />
            </div>
            <div class="absolute left-1/2 bottom-0 transform -translate-x-1/2 translate-y-1/2 w-[834px] h-[286px] bg-primary-dark opacity-30 blur-[150px] rounded-full"></div>
        </div>

        <!-- Grid for animation -->
        <div class="faq-card-grid grid grid-rows-[auto_0fr]">
            <!-- Header -->
            <div class="faq-card-header flex items-center justify-between gap-[15px] p-[30px] cursor-pointer relative z-10">
                <h3 class="text-white font-normal text-lg leading-[1.5] tracking-[-0.36px] flex-1">
                    {question}
                </h3>
                <div class="icon-container w-[18px] h-[18px] flex-shrink-0 flex items-center justify-center relative">
                    <!-- Plus Icon -->
                    <svg class="icon-plus absolute w-full h-full text-white transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    <!-- Minus Icon -->
                    <svg class="icon-minus absolute w-full h-full text-white opacity-0 transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 12H6" />
                    </svg>
                </div>
            </div>

            <!-- Body (expandable) -->
            <div class="faq-card-body overflow-hidden">
                <div class="relative px-[30px] pb-[30px] pt-0">
                    <p class="text-white/50 font-normal text-sm leading-[1.5] tracking-[-0.26px]">
                        {answer}
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .faq-card-grid {
        transition: grid-template-rows 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    .expanded-background {
        transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .faq-card-wrapper[data-expanded="true"] .faq-card-grid {
        grid-template-rows: auto 1fr;
    }
    .faq-card-wrapper[data-expanded="true"] .expanded-background {
        opacity: 1;
    }

    /* Icon transition */
    .faq-card-wrapper[data-expanded="true"] .icon-plus {
        opacity: 0;
    }
    .faq-card-wrapper[data-expanded="true"] .icon-minus {
        opacity: 1;
    }

    .faq-card-body > * {
        min-height: 0;
    }

     @media (prefers-reduced-motion: reduce) {
        .faq-card-grid,
        .expanded-background,
        .icon-plus,
        .icon-minus { 
            transition: none !important; 
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const faqCards = document.querySelectorAll('.faq-card-wrapper');

    const setCardState = (card, isExpanded) => {
        card.setAttribute('data-expanded', String(isExpanded));
    };

    faqCards.forEach(card => {
        const header = card.querySelector('.faq-card-header');
        if (!header) return;

        // Set initial state from data attribute
        const isInitiallyExpanded = card.getAttribute('data-expanded') === 'true';
        setCardState(card, isInitiallyExpanded);

        header.addEventListener('click', () => {
            const isCurrentlyExpanded = card.getAttribute('data-expanded') === 'true';

            // Close all other cards
            faqCards.forEach(otherCard => {
                if (otherCard !== card) {
                    setCardState(otherCard, false);
                }
            });

            // Toggle the clicked card
            setCardState(card, !isCurrentlyExpanded);
        });
    });
});
</script>
